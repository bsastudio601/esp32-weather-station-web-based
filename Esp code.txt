#include <Wire.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <DHT.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>

// Define the pin for the DHT22 sensor
#define DHT_PIN 23
#define DHTTYPE DHT22

DHT dht(DHT_PIN, DHTTYPE);
Adafruit_BMP280 bmp; // I2C

// Enter WIFI credentials
const char* ssid     = "Arthi";
const char* password = "01707275528";

// Enter domain name and path
const char* SERVER_NAME = "http://arthiprojects.atwebpages.com/sensordata.php";

// PROJECT_API_KEY must match the value in your server-side config file
String PROJECT_API_KEY = "iloveher143";

// Send an HTTP POST request every 30 seconds
unsigned long lastMillis = 0;
long interval = 5000;

void setup() {
  Serial.begin(115200);
  Serial.println("ESP32 serial initialized");
  dht.begin();
  Serial.println("DHT22 initialized");

  // Initialize BMP280 with I2C address 0x76
  if (!bmp.begin(0x76)) { // Replace 0x76 with the address found by the I2C scanner if necessary
    Serial.println(F("Could not find a valid BMP280 sensor, check wiring!"));
    while (1);
  }
  Serial.println("BMP280 initialized");

  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to WiFi network with IP Address: ");
  Serial.println(WiFi.localIP());
  Serial.println("Timer set to 5 seconds (interval variable),");
  Serial.println("it will take 5 seconds before publishing the first reading.");
}

void loop() {
  // Check WiFi connection status
  if (WiFi.status() == WL_CONNECTED) {
    if (millis() - lastMillis > interval) {
      // Send an HTTP POST request every interval seconds
      upload_data();
      lastMillis = millis();
    }
  } else {
    Serial.println("WiFi Disconnected");
  }

  delay(1000);  
}

void upload_data() {
  // Read temperature as Celsius
  float t = dht.readTemperature();
  
  // Read humidity
  float h = dht.readHumidity();

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  // Compute heat index in Celsius
  float hic = dht.computeHeatIndex(t, h, false);

  // Read pressure from BMP280
  float pressure = bmp.readPressure() / 100.0F; // Convert Pa to hPa

  // Convert values to string
  String humidity = String(h, 2);
  String temperature = String(t, 2);
  String heat_index = String(hic, 2);
  String pressureStr = String(pressure, 2);

  Serial.println("Temperature: " + temperature);
  Serial.println("Humidity: " + humidity);
  Serial.println("Pressure: " + pressureStr);
  Serial.println("--------------------------");

  // Prepare HTTP POST request data
  String postData;
  postData = "api_key=" + PROJECT_API_KEY;
  postData += "&temperature=" + temperature;
  postData += "&humidity=" + humidity;
  postData += "&pressure=" + pressureStr;

  Serial.print("postData: ");
  Serial.println(postData);

  WiFiClient client;
  HTTPClient http;

  http.begin(client, SERVER_NAME);
  // Specify content-type header
  http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  // Send HTTP POST request
  int httpResponseCode = http.POST(postData);

  Serial.print("HTTP Response code: ");
  Serial.println(httpResponseCode);
    
  // Free resources
  http.end();
}
